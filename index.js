import TelegramBot from 'node-telegram-bot-api';
import crypto from 'crypto';
import sqlite3 from 'sqlite3';
import { open } from 'sqlite';

// –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
const TOKEN = '7922934809:AAFrbHWWtShig5R12WcCrBpHht72XVD9MKQ';
const bot = new TelegramBot(TOKEN, { polling: true });

// ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
const CHANNEL_USERNAME = '@faceclinicmoscowchannel';

// Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
const ADMIN_CHAT_ID = '641297325'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPromise = open({
    filename: './certificates.db',
    driver: sqlite3.Database,
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async function initializeDatabase() {
    const db = await dbPromise;
    await db.exec(`
        CREATE TABLE IF NOT EXISTS certificates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            certificate_number TEXT NOT NULL UNIQUE,
            telegram_id INTEGER NOT NULL,
            name TEXT,
            phone TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    `);
    console.log('Database initialized');
}
initializeDatabase();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
function generateCertificateNumber() {
    const uniqueId = crypto.randomBytes(4).toString('hex').toUpperCase();
    return `Tel2025-${uniqueId}`;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
async function checkSubscription(userId) {
    try {
        const chatMember = await bot.getChatMember(CHANNEL_USERNAME, userId);
        return ['member', 'creator', 'administrator'].includes(chatMember.status);
    } catch (error) {
        console.error('Error checking subscription:', error);
        return false;
    }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
async function getCertificate(userId) {
    try {
        const db = await dbPromise;
        const result = await db.get(`
            SELECT certificate_number FROM certificates WHERE telegram_id = ?
        `, [userId]);
        return result?.certificate_number || null;
    } catch (error) {
        console.error('Error checking certificate:', error);
        return null;
    }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async function notifyAdmin(certificateNumber, user, name, phone) {
    const userInfo = `
üîî –ù–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω!
üìú –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certificateNumber}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
  - ID: ${user.id}
  - Username: ${user.username || 'N/A'}
  - –ò–º—è: ${name || 'N/A'}
  - –¢–µ–ª–µ—Ñ–æ–Ω: ${phone || 'N/A'}
    `;
    try {
        await bot.sendMessage(ADMIN_CHAT_ID, userInfo);
        console.log('Admin notified successfully.');
    } catch (error) {
        console.error('Error notifying admin:', error);
    }
}

// –•—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const userProgress = {};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FaceClinic! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.', {
        reply_markup: {
            keyboard: [
                ['üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 'üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'],
                ['‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'],
            ],
            resize_keyboard: true,
            one_time_keyboard: false,
        },
    });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (userProgress[chatId]?.step === 'waitingForName') {
        if (text === 'üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç') {
            bot.sendMessage(chatId, '–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.');
            return;
        }
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        userProgress[chatId].name = text;
        userProgress[chatId].step = 'waitingForPhone';
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
        return;
    }

    if (userProgress[chatId]?.step === 'waitingForPhone') {
        if (text === 'üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç') {
            bot.sendMessage(chatId, '–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.');
            return;
        }
        const phone = text.trim();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        const phoneRegex = /^\+?\d{10,15}$/;
        if (!phoneRegex.test(phone)) {
            bot.sendMessage(chatId, `
‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: +1234567890.
            `);
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        userProgress[chatId].phone = phone;
        const { name } = userProgress[chatId];
        userProgress[chatId].step = 'done';

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        const certificateNumber = generateCertificateNumber();

        try {
            const db = await dbPromise;
            await db.run(`
                INSERT INTO certificates (certificate_number, telegram_id, name, phone)
                VALUES (?, ?, ?, ?)
            `, [certificateNumber, chatId, name, phone]);

            const certificateText = `
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å—É–º–º—É 10 000 —Ä—É–±–ª–µ–π.

üìú –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certificateNumber}

–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ: https://faceclinicmoscow.com/sertterms
            `;

            await bot.sendMessage(chatId, certificateText);
            await bot.sendPhoto(chatId, 'https://static.tildacdn.com/stor3330-3636-4632-a235-393765366538/51622874.jpg', {
                caption: '–í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ.',
            });

            console.log(`Certificate issued: ${certificateNumber} for Telegram ID: ${chatId}`);
            await notifyAdmin(certificateNumber, msg.from, name, phone);
        } catch (error) {
            console.error('Error issuing certificate:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        delete userProgress[chatId];
        return;
    }

    if (text === 'üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª') {
        bot.sendMessage(chatId, `
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: [FaceClinic Moscow](https://t.me/${CHANNEL_USERNAME.slice(1)})
–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç".
        `, { parse_mode: 'Markdown' });
        return;
    }

    if (text === 'üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç') {
        const isSubscribed = await checkSubscription(chatId);

        if (!isSubscribed) {
            bot.sendMessage(chatId, `
‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: [FaceClinic Moscow](https://t.me/${CHANNEL_USERNAME.slice(1)})
–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" —Å–Ω–æ–≤–∞.
            `, { parse_mode: 'Markdown' });
        } else {
            const existingCertificate = await getCertificate(chatId);

            if (existingCertificate) {
                bot.sendMessage(chatId, `
‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${existingCertificate}.
                `);
            } else {
                userProgress[chatId] = { step: 'waitingForName' };
                bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
            }
        }
        return;
    }

    if (text === '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç') {
        const certificateNumber = await getCertificate(chatId);

        if (certificateNumber) {
            const isSubscribed = await checkSubscription(chatId);

            if (isSubscribed) {
                bot.sendMessage(chatId, `
‚úÖ –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.
üìú –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certificateNumber}.
                `);
            } else {
                bot.sendMessage(chatId, `
‚ùå –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞: [FaceClinic Moscow](https://t.me/${CHANNEL_USERNAME.slice(1)}).
                `, { parse_mode: 'Markdown' });
            }
        } else {
            bot.sendMessage(chatId, `
‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ, –Ω–∞–∂–∞–≤ "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç".
            `);
        }
        return;
    }

    if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
        bot.sendMessage(chatId, `
‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:
1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [FaceClinic Moscow](https://t.me/${CHANNEL_USERNAME.slice(1)})
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç".
        `, { parse_mode: 'Markdown' });
        return;
    }

    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.');
});

console.log('Bot is running...');
