import TelegramBot from 'node-telegram-bot-api';
import crypto from 'crypto';
import Database from 'better-sqlite3';
import 'dotenv/config';
import express from 'express';
import axios from 'axios';
import createWalletPass from './walletPass.js';
import { setupPhotoAnalysis } from './photoAnalysis.js';


// –°–æ–∑–¥–∞—ë–º HTTP-—Å–µ—Ä–≤–µ—Ä
const app = express();

app.get('/', (req, res) => {
    res.send('Bot is running!');
});
const PORT = process.env.PORT || 3000;


app.post('/webhook', express.json(), (req, res) => {
    bot.processUpdate(req.body); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    res.sendStatus(200); // –û—Ç–≤–µ—Ç –¥–ª—è Telegram API
});


// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TOKEN = process.env.TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const CHANNEL_USERNAME = '@faceclinicmoscowchannel';

console.log('TOKEN:', process.env.TOKEN);
console.log('ADMIN_CHAT_ID:', process.env.ADMIN_CHAT_ID);

if (!TOKEN || !ADMIN_CHAT_ID) {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TOKEN –∏–ª–∏ ADMIN_CHAT_ID.');
    process.exit(1);
}

const webhookUrl = 'https://faceclinic-production.up.railway.app/webhook';


const bot = new TelegramBot(TOKEN);

// –ò–ò –∞–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ


// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook

// –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π webhook –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
axios.post(`https://api.telegram.org/bot${TOKEN}/deleteWebhook`)
    .then(() => {
        return axios.post(`https://api.telegram.org/bot${TOKEN}/setWebhook`, {
            url: webhookUrl
        });
    })
    .then(response => {
        console.log('Webhook successfully set:', response.data);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        return axios.get(`https://api.telegram.org/bot${TOKEN}/getWebhookInfo`);
    })
    .then(response => {
        console.log('Webhook info:', response.data);
    })
    .catch(error => {
        console.error('Error setting webhook:', error);
    });

// –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫—É
bot.getWebHookInfo().then((info) => {
    console.log('Webhook info:', info);
    if (info.url !== webhookUrl) {
        console.log('Webhook URL –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...');
        return bot.setWebHook(webhookUrl);
    }
}).catch(console.error);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new Database('./certificates.db', { verbose: console.log });

function initializeDatabase() {
    db.exec(`
        CREATE TABLE IF NOT EXISTS certificates (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            certificate_number TEXT NOT NULL UNIQUE,
            telegram_id INTEGER NOT NULL,
            name TEXT,
            phone TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    `);
    console.log('Database initialized');
}
initializeDatabase();

setupPhotoAnalysis(bot, db, process.env.OPENAI_API_KEY, checkSubscription);


function generateCertificateNumber() {
    return `Tel2025-${crypto.randomBytes(4).toString('hex').toUpperCase()}`;
}

async function checkSubscription(userId) {
    try {
        const chatMember = await bot.getChatMember(CHANNEL_USERNAME, userId);
        return ['member', 'creator', 'administrator'].includes(chatMember.status);
    } catch (error) {
        console.error('Error checking subscription:', error);
        return null;
    }
}

function getCertificate(userId) {
    try {
        const result = db.prepare(`
            SELECT certificate_number FROM certificates WHERE telegram_id = ?
        `).get(userId);
        return result ? result.certificate_number : null;
    } catch (error) {
        console.error('Error checking certificate:', error);
        return null;
    }
}

async function notifyAdmin(certificateNumber, user, name, phone) {
    const userInfo = `
üîî –ù–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω!
üìú –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certificateNumber}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:
  - ID: ${user.id}
  - Username: ${user.username || 'N/A'}
  - –ò–º—è: ${name || 'N/A'}
  - –¢–µ–ª–µ—Ñ–æ–Ω: ${phone || 'N/A'}
    `;
    try {
        await bot.sendMessage(ADMIN_CHAT_ID, userInfo);
        console.log('Admin notified successfully.');
    } catch (error) {
        console.error('Error notifying admin:', error);
    }
}

const userProgress = {};

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FaceClinic! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.', {
        reply_markup: {
            keyboard: [
                ['üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', 'üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'],
                ['‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '‚ÑπÔ∏è –ü–æ–º–æ—â—å'],
                ['üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ']

            ],
            resize_keyboard: true,
            one_time_keyboard: false,
        },
    });
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;

    if (userProgress[chatId]?.step === 'waitingForName') {
        userProgress[chatId].name = text;
        userProgress[chatId].step = 'waitingForPhone';
        bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
        return;
    }

    if (userProgress[chatId]?.step === 'waitingForPhone') {
        const phone = text.trim();
        const phoneRegex = /^\+?\d{10,15}$/;

        if (!phoneRegex.test(phone)) {
            bot.sendMessage(chatId, '‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +1234567890.');
            return;
        }

        const name = userProgress[chatId].name;
        const certificateNumber = generateCertificateNumber();

        try {
            db.prepare(`
                INSERT INTO certificates (certificate_number, telegram_id, name, phone)
                VALUES (?, ?, ?, ?)
            `).run(certificateNumber, chatId, name, phone);

            const certificateText = `
üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å—É–º–º—É 10 000 —Ä—É–±–ª–µ–π.
üìú –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certificateNumber}
–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: https://faceclinicmoscow.com/sertterms
            `;

            await bot.sendMessage(chatId, certificateText);
            await bot.sendPhoto(chatId, 'https://static.tildacdn.com/stor3330-3636-4632-a235-393765366538/51622874.jpg', {
                caption: '–í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –£—Å–ª–æ–≤–∏—è —É–∫–∞–∑–∞–Ω—ã –Ω–∞ —Å–∞–π—Ç–µ.',
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É Apple Wallet pass
         /*   try {
                const passBuffer = await createWalletPass(certificateNumber, name);
                await bot.sendDocument(chatId, passBuffer, {
                    filename: `FaceClinic-${certificateNumber}.pkpass`,
                    caption: '–î–æ–±–∞–≤—å—Ç–µ –≤–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ Apple Wallet'
                });
                console.log(`Wallet pass sent for certificate: ${certificateNumber}`);
            } catch (error) {
                console.error('Error sending wallet pass:', error);
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ pass –Ω–µ —É–¥–∞–ª–∞—Å—å
            }*/

            console.log(`Certificate issued: ${certificateNumber} for Telegram ID: ${chatId}`);
            await notifyAdmin(certificateNumber, msg.from, name, phone);
        } catch (error) {
            console.error('Error issuing certificate:', error);
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } finally {
            delete userProgress[chatId];
        }
        return;
    }

    if (text === 'üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª') {
        bot.sendMessage(chatId, `
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: [FaceClinic Moscow](https://t.me/${CHANNEL_USERNAME.slice(1)})
–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç".
        `, { parse_mode: 'Markdown' });
        return;
    }

    if (text === 'üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç') {
        const isSubscribed = await checkSubscription(chatId);

        if (isSubscribed === null) {
            bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }

        if (!isSubscribed) {
            bot.sendMessage(chatId, `
‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å: [FaceClinic Moscow](https://t.me/${CHANNEL_USERNAME.slice(1)})
–ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç" —Å–Ω–æ–≤–∞.
            `, { parse_mode: 'Markdown' });
            return;
        }

        const existingCertificate = getCertificate(chatId);

        if (existingCertificate) {
            bot.sendMessage(chatId, `‚ùó –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: ${existingCertificate}.`);
        } else {
            userProgress[chatId] = { step: 'waitingForName' };
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
        }
        return;
    }

    if (text === '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç') {
        const certificateNumber = getCertificate(chatId);

        if (certificateNumber) {
            const isSubscribed = await checkSubscription(chatId);

            if (isSubscribed) {
                bot.sendMessage(chatId, `
‚úÖ –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.
üìú –ù–æ–º–µ—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: ${certificateNumber}.
                `);
            } else {
                bot.sendMessage(chatId, `
‚ùå –í–∞—à —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∫–∞–Ω–∞–ª–∞.
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å —Å–Ω–æ–≤–∞: [FaceClinic Moscow](https://t.me/${CHANNEL_USERNAME.slice(1)}).
                `, { parse_mode: 'Markdown' });
            }
        } else {
            bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞. –ù–∞–∂–º–∏—Ç–µ "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç".');
        }
        return;
    }

    if (text === '‚ÑπÔ∏è –ü–æ–º–æ—â—å') {
        bot.sendMessage(chatId, `
‚ÑπÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:
1Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª: [FaceClinic Moscow](https://t.me/${CHANNEL_USERNAME.slice(1)})
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç".
        `, { parse_mode: 'Markdown' });
        return;
    }

    bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ.');
});

app.listen(PORT, () => {
    console.log(`HTTP server running on port ${PORT}`);
}).on('error', (err) => {
    console.error('Server error:', err);
});

console.log('Bot is running...');
