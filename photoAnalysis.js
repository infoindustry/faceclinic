import OpenAI from 'openai';

export class PhotoAnalyzer {
    constructor(db, openaiApiKey) {
        this.db = db;
        this.openai = new OpenAI({
            apiKey: openaiApiKey
        });

        this.initDatabase();
    }

    initDatabase() {
        this.db.exec(`
            CREATE TABLE IF NOT EXISTS photo_analysis (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER NOT NULL,
                analysis_date DATETIME DEFAULT CURRENT_TIMESTAMP,
                analysis_result TEXT
            )
        `);
    }

    checkAnalysisLimit(userId) {
        const result = this.db.prepare(`
            SELECT COUNT(*) as count 
            FROM photo_analysis 
            WHERE telegram_id = ?
        `).get(userId);

        return result.count < 4;
    }

    recordAnalysis(userId, analysisResult) {
        this.db.prepare(`
            INSERT INTO photo_analysis (telegram_id, analysis_result)
            VALUES (?, ?)
        `).run(parseInt(userId), analysisResult);
    }

    async analyzePhoto(photoUrl) {
        try {
            console.log('Starting photo analysis with URL:', photoUrl);

            const response = await this.openai.chat.completions.create({
                model: "gpt-4o",  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
                messages: [
                    {
                        role: "user",
                        content: [
                            {
                                type: "text",
                                text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏ —á—Ç–æ —Ç—ã –≤–∏–¥–∏—à—å –Ω–∞ —Ñ–æ—Ç–æ, –æ–±—Ä–∞—â–∞—è –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞: \n1. –û–±—â–∏–µ —á–µ—Ä—Ç—ã –ª–∏—Ü–∞\n2. –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–∂–∏\n3. –ó–∞–º–µ—Ç–Ω—ã–µ –∞—Å–∏–º–º–µ—Ç—Ä–∏–∏ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —á–µ—Ä—Ç—ã"
                            },
                            {
                                type: "image_url",
                                image_url: {
                                    url: photoUrl
                                }
                            }
                        ]
                    }
                ],
                max_tokens: 1000
            });

            console.log('OpenAI API response:', response);
            return response.choices[0].message.content;
        } catch (error) {
            console.error('Detailed API error:', error);
            throw error;
        }
    }
}

export const setupPhotoAnalysis = (bot, db, openaiApiKey, checkSubscription) => {
    const analyzer = new PhotoAnalyzer(db, openaiApiKey);
    const userStates = new Map();

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
    bot.on('message', async (msg) => {
        if (msg.text !== 'üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ') return;

        const chatId = msg.chat.id;
        const isSubscribed = await checkSubscription(chatId);

        if (!isSubscribed) {
            bot.sendMessage(chatId, '–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.');
            return;
        }

        if (!analyzer.checkAnalysisLimit(chatId)) {
            bot.sendMessage(chatId, '–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤ (4). –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∑–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–µ–º.');
            return;
        }

        await bot.sendPhoto(chatId, 'https://static.tildacdn.com/tild3838-6165-4735-b931-636266363865/example.jpeg', {
            caption: `
ü§ñ –ù–∞—à –ò–ò –º–æ–∂–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–µ –ª–∏—Ü–æ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å:
- –¢–∏–ø —Å—Ç–∞—Ä–µ–Ω–∏—è
- –°–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–∂–∏
- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã

üì∏ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –ª–∏—Ü–∞ –∫–∞–∫ –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ –≤—ã—à–µ:
- –ü—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏
- –ê–Ω—Ñ–∞—Å (–ø—Ä—è–º–æ)
- –ë–µ–∑ –º–∞–∫–∏—è–∂–∞
- –ë–µ–∑ –æ—á–∫–æ–≤`
        });

        userStates.set(chatId, 'waitingForPhoto');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
    bot.on('photo', async (msg) => {
        const chatId = msg.chat.id;

        if (userStates.get(chatId) !== 'waitingForPhoto') {
            return;
        }

        try {
            console.log('Received photo message:', msg.photo); // –õ–æ–≥–∏—Ä—É–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ —Ñ–æ—Ç–æ

            const photo = msg.photo[msg.photo.length - 1];
            console.log('Selected photo:', photo); // –õ–æ–≥–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ

            const fileLink = await bot.getFileLink(photo.file_id);
            console.log('Generated file link:', fileLink); // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É

            await bot.sendMessage(chatId, 'üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–µ —Ñ–æ—Ç–æ... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞
            try {
                const testResponse = await axios.head(fileLink);
                console.log('File accessibility check:', testResponse.status);
            } catch (error) {
                console.error('File accessibility error:', error.message);
            }

            const analysis = await analyzer.analyzePhoto(fileLink);
            console.log('Raw GPT response:', analysis);  // –õ–æ–≥–∏—Ä—É–µ–º —Å—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT

            if (!analysis || analysis.includes('–ò–∑–≤–∏–Ω–∏—Ç–µ')) {
                console.error('Analysis failed or returned apology');
                throw new Error('Failed to analyze photo');
            }

            analyzer.recordAnalysis(chatId, analysis);

            await bot.sendMessage(chatId, analysis, { parse_mode: 'Markdown' });

            await bot.sendMessage(chatId, `
üìû –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º–∏?

–ó–∞–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:
‚òéÔ∏è [–ü–æ–∑–≤–æ–Ω–∏—Ç—å](tel:+79266568808)
üí¨ [–ù–∞–ø–∏—Å–∞—Ç—å –≤ WhatsApp](https://api.whatsapp.com/send?phone=79266568808)
        `, { parse_mode: 'Markdown' });

        } catch (error) {
            console.error('Full error object:', error);
            console.error('Error stack:', error.stack);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞ —Ñ–æ—Ç–æ —á–µ—Ç–∫–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ –∞–Ω—Ñ–∞—Å –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } finally {
            userStates.delete(chatId);
        }
    });
};